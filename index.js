require('dotenv').config();
const {
    Bot,
    GrammyError,
    HttpError,
    Keyboard,
    InlineKeyboard
} = require('grammy');
const  { hydrate } = require('@grammyjs/hydrate');

const bot = new  Bot (process.env.BOT_API_KEY);
bot.use(hydrate());

bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
    },
    {
        command: 'menu',
        description: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ú–µ–Ω—é',
    },

]);

bot.command('start', async  (ctx) => {
    await ctx.react('üëè')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç!', {
        reply_parameters: {message_id: ctx.msg.message_id}
    });
});

bot.command('mood', async  (ctx) => {
    //const moodKeyboard = new Keyboard().text('–•–æ—Ä–æ—à–æ').row().text('–ù–æ—Ä–º–∞–ª—å–Ω–æ').row().text('–ü–ª–æ—Ö–æ').resized().
    // oneTime()

    const  moodLabels = ['–•–æ—Ä–æ—à–æ','–ù–æ—Ä–º–∞–ª—å–Ω–æ','–ü–ª–æ—Ö–æ']
    const rows = moodLabels.map((label) => {
        return [
            Keyboard.text(label)
        ]
    })
    const moodKeyboard2 = Keyboard.from(rows).resized()
    await ctx.reply('–ö–∞–∫ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', {
        reply_markup: moodKeyboard2
    })
})

bot.command('share', async   (ctx) => {
    const  shareKeyboard = new  Keyboard().requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—é').requestContact('–ö–æ–Ω—Ç–∞–∫—Ç').
    requestPoll('–û–ø—Ä–æ—Å').placeholder('–í—ã–±–µ—Ä–∏...').resized().oneTime()

    await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
        reply_markup: shareKeyboard
    })
})



bot.command('inline',async  (ctx) => {



    const inlineKeyboard2 = new InlineKeyboard().url(' –ü—Ä–µ–≤–∞—è —Å—Å—ã–ª–∫–∞', 'https://www.youtube.com/watch?v=F1YfH9LdCWA&t=302s')
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É', {
        reply_markup: inlineKeyboard2,
    });
});

bot.callbackQuery([], async (ctx) => {
   await ctx.answerCallbackQuery()
    await ctx.reply('–í—ã –Ω–∞–∂–∞–ª–∏: ${ctx.callbackQuery.data}')
})

    bot.on('callback_query:data', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply('–í—ã –Ω–∞: ${ctx.callbackQuery.data}');
})


bot.hears('–•–æ—Ä–æ—à–æ', async  (ctx) => {
    await ctx.reply('–∑–¥–æ—Ä–æ–≤–æ!', {
        reply_markup: {remove_keyboard: true}
    })
})

bot.hears('–ù–æ—Ä–º–∞–ª—å–Ω–æ', async  (ctx) => {
    await ctx.reply('–£ –º–µ–Ω—è —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ', {
        reply_markup: {remove_keyboard: true}
    })
})

bot.hears('–ü–ª–æ—Ö–æ', async  (ctx) => {
    await ctx.reply('–ê –Ω—É –±—ã—Å—Ç—Ä–æ –∏—Å–ø–∞—Ä–≤–ª—è–π', {
        reply_markup: {remove_keyboard: true}
    })
})

const menuKeyboard = new InlineKeyboard()
    .text('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'order-status')
    .text('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'supprot');
const  backKeyboard = new InlineKeyboard().text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.command('menu',async  (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
        reply_markup: menuKeyboard,
    });
});

bot.callbackQuery('order-status',async  (ctx) => {
    await ctx.callbackQuery.message.editText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ø—É—Ç–∏', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery('supprot',async  (ctx) => {
    await ctx.callbackQuery.message.editText('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery('back',async  (ctx) => {
    await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
        reply_markup: menuKeyboard,
    });
    await ctx.answerCallbackQuery();
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
      console.error("Error in request: e.descriptions");
  } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram", e);
  } else {
      console.error("Unknown error", e);
  }
});

bot.start();
